package com.example.alicehealth.adapters;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Paint;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.recyclerview.widget.RecyclerView;

import com.example.alicehealth.FilterProductsUser;
import com.example.alicehealth.R;
import com.example.alicehealth.models.ModelProducts;
import com.squareup.picasso.Picasso;

import java.util.ArrayList;

public class AdapterProductUser extends RecyclerView.Adapter<AdapterProductUser.HolderProductUser> implements Filterable {
    private Context context;
    public ArrayList<ModelProducts> productsList, filterList;
    private FilterProductsUser filter;

    public AdapterProductUser(Context context, ArrayList<ModelProducts> productsList) {
        this.context = context;
        this.productsList = productsList;
        this.filterList = productsList;
    }

    @NonNull
    @Override
    public HolderProductUser onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        //inflate layout
        View view = LayoutInflater.from(context).inflate(R.layout.row_product_user, parent, false);
        return new HolderProductUser(view);
    }

    @Override
    public void onBindViewHolder(@NonNull HolderProductUser holder, int position) {
        //get data
        ModelProducts modelProducts = productsList.get(position);

        String discountAvailable = modelProducts.getDiscountAvailable();
        String discountedNot = modelProducts.getDiscountedNot();
        String discountedPrice = modelProducts.getDiscountedPrice();
        String productCategory = modelProducts.getProductCategory();
        String originalPrice = modelProducts.getOriginalPrice();
        String productDescription = modelProducts.getProductDescription();
        String productTitle = modelProducts.getProductTitle();
        String productQuantity = modelProducts.getProductQuantity();
        String productId = modelProducts.getProductID();
        String timestamp = modelProducts.getTimestamp();
        String productIcon = modelProducts.getProductIcon();

        //set data

        holder.titleTv.setText(productTitle);
        holder.descriptionTv.setText(productDescription);
        holder.discountedNotTv.setText(discountedNot);
        holder.discountedPriceTv.setText("$"+discountedPrice);
        holder.originalPriceTv.setText("$"+originalPrice);


        if (discountAvailable.equals("true")){
            //product is on discount
            holder.discountedPriceTv.setVisibility(View.VISIBLE);
            holder.discountedNotTv.setVisibility(View.VISIBLE);
            holder.originalPriceTv.setPaintFlags(holder.originalPriceTv.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG); //add strike through on original price
        }
        else{
            //product is not on discount
            holder.discountedPriceTv.setVisibility(View.GONE);
            holder.discountedNotTv.setVisibility(View.GONE);
            holder.originalPriceTv.setPaintFlags(0);
        }

        try {
            Picasso.get().load(productIcon).placeholder(R.drawable.ic_add_shopping_primary).into(holder.productIconIv);


        }
        catch (Exception e){
            holder.productIconIv.setImageResource(R.drawable.ic_add_shopping_primary);

        }
        holder.addToCartTv.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //add product to cart

                showQuantityDialog(modelProducts);
            }
        });
        holder.itemView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //show product details
            }
        });


    }

    private double cost = 0;
    private double finalCost = 0;
    private int quantity = 0;

    private void showQuantityDialog(ModelProducts modelProducts) {

        //inflate layout for dialog
        View view = LayoutInflater.from(context).inflate(R.layout.dialog_quantity, null);
        //init layout views
        ImageView productsIv = view.findViewById(R.id.productsIv);
        TextView titleTv = view.findViewById(R.id.titleTv);
        TextView pQuantityTv = view.findViewById(R.id.pQuantityTv);
        TextView descriptionTv = view.findViewById(R.id.descriptionTv);
        TextView discountedNotTv = view.findViewById(R.id.discountedNotTv);
        TextView originalPriceTv = view.findViewById(R.id.originalPriceTv);
        TextView priceDiscountedTv = view.findViewById(R.id.priceDiscountedTv);
        TextView finalPriceTv = view.findViewById(R.id.finalPriceTv);
        TextView quantityTv = view.findViewById(R.id.quantityTv);
        ImageButton decrementBtn = view.findViewById(R.id.decrementBtn);
        ImageButton incrementBtn = view.findViewById(R.id.incrementBtn);
        Button continueBtn = view.findViewById(R.id.continueBtn);

        //get data from model

        String productId = modelProducts.getProductID();
        String title = modelProducts.getProductTitle();
        String productQuantity = modelProducts.getProductQuantity();
        String description = modelProducts.getProductDescription();
        String discountedNot = modelProducts.getDiscountedNot();
        String image = modelProducts.getProductIcon();

        String price;
        if (modelProducts.getDiscountAvailable().equals("true")){
            //product have discount
            price = modelProducts.getDiscountedPrice();
            discountedNotTv.setVisibility(View.VISIBLE);
            originalPriceTv.setPaintFlags(originalPriceTv.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG); //add strike through on original price

        }
        else{
            //product don't have discount
            discountedNotTv.setVisibility(View.GONE);
            priceDiscountedTv.setVisibility(View.GONE);
            price = modelProducts.getOriginalPrice();
        }

        cost = Double.parseDouble(price.replaceAll("$", ""));
        finalCost = Double.parseDouble(price.replaceAll("$",""));
        quantity = 1;

        //dialog
        AlertDialog.Builder builder = new AlertDialog.Builder(context);
        builder.setView(view);

        //set data
        try {
            Picasso.get().load(image).placeholder(R.drawable.ic_cart_gray).into(productsIv);
        }
        catch (Exception e){
            productsIv.setImageResource(R.drawable.ic_cart_gray);
        }
        titleTv.setText(""+title);
        pQuantityTv.setText(""+productQuantity);
        descriptionTv.setText(""+description);
        discountedNotTv.setText(""+discountedNot);
        quantityTv.setText(""+quantity);
        originalPriceTv.setText("$"+modelProducts.getOriginalPrice());
        priceDiscountedTv.setText("$"+modelProducts.getDiscountedPrice());
        finalPriceTv.setText("$"+finalCost);

        AlertDialog dialog = builder.create();
        dialog.show();

        //increase quantity of the product
        incrementBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finalCost = finalCost + cost;
                quantity++;

                finalPriceTv.setText("$"+finalCost);
                quantityTv.setText(""+quantity);
            }
        });
        //decrease quantity of the product, only if quantity>1

        decrementBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (quantity>1){
                    finalCost = finalCost - cost;
                    quantity--;

                    finalPriceTv.setText("$"+finalCost);
                    quantityTv.setText(""+quantity);

                }
            }
        });
        continueBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String title = titleTv.getText().toString().trim();
                String priceEach = originalPriceTv.getText().toString().trim().replace("$", "");
                String price = finalPriceTv.getText().toString().trim().replace("", "");
                String quantity = quantityTv.getText().toString().trim();


                //add to db(SQLite)
                addCart(productId, title, priceEach, price, quantity);

                dialog.dismiss();


            }
        });
    }
    private int itemId = 1;
    private void addCart(String productId, String title, String priceEach, String price, String quantity) {
        itemId++;




    }

    @Override
    public int getItemCount() {
        return productsList.size();
    }

    @Override
    public Filter getFilter() {

        if (filter == null){
            filter = new FilterProductsUser(this, filterList);

        }
        return filter;
    }


    class HolderProductUser extends RecyclerView.ViewHolder{

        //ui views
        private ImageView productIconIv;
        private TextView discountedNotTv, titleTv, descriptionTv, addToCartTv, discountedPriceTv, originalPriceTv ;

        public HolderProductUser(@NonNull View itemView) {
            super(itemView);

            //init ui views
            productIconIv = itemView.findViewById(R.id.productIconIv);
            discountedNotTv = itemView.findViewById(R.id.discountedNotTv);
            titleTv = itemView.findViewById(R.id.titleTv);
            descriptionTv = itemView.findViewById(R.id.descriptionTv);
            addToCartTv = itemView.findViewById(R.id.addToCartTv);
            discountedPriceTv = itemView.findViewById(R.id.discountedPriceTv);
            originalPriceTv = itemView.findViewById(R.id.originalPriceTv);


        }
    }
}
